//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "photo")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::flickr_photo::Entity")]
    FlickrPhoto,
    #[sea_orm(has_many = "super::photo_file::Entity")]
    PhotoFile,
    #[sea_orm(has_many = "super::photo_reaction::Entity")]
    PhotoReaction,
    #[sea_orm(has_many = "super::photo_tag::Entity")]
    PhotoTag,
}

impl Related<super::flickr_photo::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlickrPhoto.def()
    }
}

impl Related<super::photo_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoFile.def()
    }
}

impl Related<super::photo_reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoReaction.def()
    }
}

impl Related<super::photo_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoTag.def()
    }
}

impl Related<super::directory::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_file::Relation::Directory.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_file::Relation::Photo.def().rev())
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_tag::Relation::Tag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_tag::Relation::Photo.def().rev())
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_reaction::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_reaction::Relation::Photo.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
