//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "flickr_photo")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub flickr_id: u64,
    pub photo_id: u64,
    pub is_public: i8,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::flickr_photo_size::Entity")]
    FlickrPhotoSize,
    #[sea_orm(
        belongs_to = "super::photo::Entity",
        from = "Column::PhotoId",
        to = "super::photo::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Photo,
}

impl Related<super::flickr_photo_size::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlickrPhotoSize.def()
    }
}

impl Related<super::photo::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Photo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::flickr_photo_size::Entity")]
    FlickrPhotoSize,
    #[sea_orm(entity = "super::photo::Entity")]
    Photo,
}
