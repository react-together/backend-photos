//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "directory")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    pub parent_id: Option<u64>,
    pub name: String,
    pub path: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::photo_file::Entity")]
    PhotoFile,
}

impl Related<super::photo_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoFile.def()
    }
}

impl Related<super::photo::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_file::Relation::Photo.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_file::Relation::Directory.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "Entity", def = "Relation::SelfRef.def()")]
    SelfRef,
    #[sea_orm(entity = "super::photo_file::Entity")]
    PhotoFile,
    #[sea_orm(entity = "Entity", def = "Relation::SelfRef.def().rev()")]
    SelfRefReverse,
    #[sea_orm(entity = "super::photo::Entity")]
    Photo,
}
