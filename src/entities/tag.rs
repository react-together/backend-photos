//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use super::sea_orm_active_enums::TagType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tag")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    #[sea_orm(unique)]
    pub name: String,
    pub description: String,
    pub note: String,
    pub tag_type: TagType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::flickr_photoset_tag::Entity")]
    FlickrPhotosetTag,
    #[sea_orm(has_many = "super::photo_tag::Entity")]
    PhotoTag,
}

impl Related<super::flickr_photoset_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlickrPhotosetTag.def()
    }
}

impl Related<super::photo_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoTag.def()
    }
}

impl Related<super::flickr_photoset::Entity> for Entity {
    fn to() -> RelationDef {
        super::flickr_photoset_tag::Relation::FlickrPhotoset.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::flickr_photoset_tag::Relation::Tag.def().rev())
    }
}

impl Related<super::photo::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_tag::Relation::Photo.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_tag::Relation::Tag.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::flickr_photoset_tag::Entity")]
    FlickrPhotosetTag,
    #[sea_orm(entity = "super::photo_tag::Entity")]
    PhotoTag,
    #[sea_orm(entity = "super::flickr_photoset::Entity")]
    FlickrPhotoset,
    #[sea_orm(entity = "super::photo::Entity")]
    Photo,
}
