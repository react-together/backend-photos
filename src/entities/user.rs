//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    serde::Serialize,
    serde::Deserialize,
    async_graphql::SimpleObject,
)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    #[sea_orm(unique)]
    pub email: String,
    #[sea_orm(unique)]
    pub keycloak_sub: String,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::flickr_photoset::Entity")]
    FlickrPhotoset,
    #[sea_orm(has_many = "super::photo_reaction::Entity")]
    PhotoReaction,
}

impl Related<super::flickr_photoset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlickrPhotoset.def()
    }
}

impl Related<super::photo_reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PhotoReaction.def()
    }
}

impl Related<super::photo::Entity> for Entity {
    fn to() -> RelationDef {
        super::photo_reaction::Relation::Photo.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::photo_reaction::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::flickr_photoset::Entity")]
    FlickrPhotoset,
    #[sea_orm(entity = "super::photo_reaction::Entity")]
    PhotoReaction,
    #[sea_orm(entity = "super::photo::Entity")]
    Photo,
}
